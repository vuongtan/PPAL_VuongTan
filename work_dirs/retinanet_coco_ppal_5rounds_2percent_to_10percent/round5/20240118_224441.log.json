{"env_info": "sys.platform: linux\nPython: 3.10.12 (main, Nov 20 2023, 15:14:05) [GCC 11.4.0]\nCUDA available: True\nGPU 0: Tesla T4\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 12.2, V12.2.140\nGCC: x86_64-linux-gnu-gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\nPyTorch: 1.11.0+cu113\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.12.0+cu113\nOpenCV: 4.8.0\nMMCV: 1.5.0\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.3\nMMDetection: 2.20.0+f3aac93", "config": "model = dict(\n    type='RetinaNet',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=False),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint='data/pretrain_models/resnet50-19c8e357.pth')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs='on_input',\n        num_outs=5),\n    bbox_head=dict(\n        type='RetinaQualityEMAHead',\n        num_classes=10,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            octave_base_scale=4,\n            scales_per_octave=3,\n            ratios=[0.5, 1.0, 2.0],\n            strides=[8, 16, 32, 64, 128]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0),\n        base_momentum=0.99),\n    train_cfg=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.4,\n            min_pos_iou=0,\n            ignore_iof_thr=-1),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    test_cfg=dict(\n        nms_pre=5000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100))\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[20])\nrunner = dict(type='EpochBasedRunner', max_epochs=30)\ncheckpoint_config = dict(interval=30, max_keep_ckpts=1, by_epoch=True)\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nmmdet_base = '../../_base_'\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=6,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        'work_dirs/retinanet_coco_ppal_5rounds_2percent_to_10percent/round5/annotations/labeled.json',\n        img_prefix='data/coco/train2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='data/coco/annotations/instances_val2017.json',\n        img_prefix='data/coco/val2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='data/coco/annotations/instances_val2017.json',\n        img_prefix='data/coco/val2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlabeled_data = 'work_dirs/retinanet_coco_ppal_5rounds_2percent_to_10percent/round5/annotations/labeled.json'\nunlabeled_data = 'work_dirs/retinanet_coco_ppal_5rounds_2percent_to_10percent/round5/annotations/unlabeled.json'\nevaluation = dict(interval=999999, metric='bbox')\nwork_dir = 'work_dirs/retinanet_coco_ppal_5rounds_2percent_to_10percent/round5'\nauto_resume = False\ngpu_ids = range(0, 1)\n", "seed": 783476543, "exp_name": "retinanet_26e.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00099, "memory": 9050, "data_time": 0.27319, "loss_cls": 1.14471, "loss_bbox": 2.07288, "loss": 3.2176, "grad_norm": 5.83658, "time": 2.36617}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00199, "memory": 9321, "data_time": 0.02431, "loss_cls": 1.09681, "loss_bbox": 1.20514, "loss": 2.30195, "grad_norm": 9.94195, "time": 2.12619}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00299, "memory": 9780, "data_time": 0.02417, "loss_cls": 1.00288, "loss_bbox": 1.28897, "loss": 2.29185, "grad_norm": 7.81781, "time": 2.11739}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00399, "memory": 9780, "data_time": 0.02515, "loss_cls": 0.98471, "loss_bbox": 1.1636, "loss": 2.14831, "grad_norm": 5.73473, "time": 2.11707}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00499, "memory": 9780, "data_time": 0.02562, "loss_cls": 0.96727, "loss_bbox": 1.153, "loss": 2.12028, "grad_norm": 3.85188, "time": 2.11655}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00598, "memory": 9780, "data_time": 0.02502, "loss_cls": 0.97064, "loss_bbox": 1.15418, "loss": 2.12482, "grad_norm": 7.47175, "time": 2.1116}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00698, "memory": 9780, "data_time": 0.02654, "loss_cls": 0.9995, "loss_bbox": 1.11872, "loss": 2.11822, "grad_norm": 1.96004, "time": 2.10462}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00798, "memory": 9780, "data_time": 0.02585, "loss_cls": 0.89553, "loss_bbox": 1.13989, "loss": 2.03541, "grad_norm": 1.77958, "time": 2.10917}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00898, "memory": 9780, "data_time": 0.0265, "loss_cls": 0.85818, "loss_bbox": 1.1748, "loss": 2.03298, "grad_norm": 1.51977, "time": 2.07527}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 0.00998, "memory": 9780, "data_time": 0.39033, "loss_cls": 0.78027, "loss_bbox": 1.07614, "loss": 1.85641, "grad_norm": 2.95155, "time": 2.48603}
{"mode": "train", "epoch": 2, "iter": 550, "lr": 0.01, "memory": 9780, "data_time": 0.02468, "loss_cls": 0.88814, "loss_bbox": 1.03413, "loss": 1.92228, "grad_norm": 3.15249, "time": 2.08514}
{"mode": "train", "epoch": 2, "iter": 600, "lr": 0.01, "memory": 9780, "data_time": 0.02565, "loss_cls": 0.81248, "loss_bbox": 0.93989, "loss": 1.75236, "grad_norm": 2.23611, "time": 2.09391}
{"mode": "train", "epoch": 2, "iter": 650, "lr": 0.01, "memory": 9780, "data_time": 0.02512, "loss_cls": 0.73312, "loss_bbox": 0.95061, "loss": 1.68373, "grad_norm": 2.67784, "time": 2.10118}
{"mode": "train", "epoch": 2, "iter": 700, "lr": 0.01, "memory": 9780, "data_time": 0.02573, "loss_cls": 0.6804, "loss_bbox": 0.96703, "loss": 1.64743, "grad_norm": 2.72273, "time": 2.11048}
{"mode": "train", "epoch": 2, "iter": 750, "lr": 0.01, "memory": 9780, "data_time": 0.02576, "loss_cls": 0.64454, "loss_bbox": 0.95455, "loss": 1.59909, "grad_norm": 2.71147, "time": 2.08944}
{"mode": "train", "epoch": 2, "iter": 800, "lr": 0.01, "memory": 9806, "data_time": 0.02638, "loss_cls": 0.65097, "loss_bbox": 0.97623, "loss": 1.6272, "grad_norm": 2.64624, "time": 2.11228}
{"mode": "train", "epoch": 2, "iter": 850, "lr": 0.01, "memory": 9806, "data_time": 0.0261, "loss_cls": 0.6213, "loss_bbox": 0.93311, "loss": 1.5544, "grad_norm": 2.33234, "time": 2.10692}
{"mode": "train", "epoch": 2, "iter": 900, "lr": 0.01, "memory": 9806, "data_time": 0.02659, "loss_cls": 0.58987, "loss_bbox": 0.93661, "loss": 1.52648, "grad_norm": 2.51957, "time": 2.09541}
{"mode": "train", "epoch": 3, "iter": 950, "lr": 0.01, "memory": 9806, "data_time": 0.67013, "loss_cls": 0.59513, "loss_bbox": 0.89545, "loss": 1.49058, "grad_norm": 2.7381, "time": 2.75701}
{"mode": "train", "epoch": 3, "iter": 1000, "lr": 0.01, "memory": 9806, "data_time": 0.02597, "loss_cls": 0.60701, "loss_bbox": 0.90831, "loss": 1.51532, "grad_norm": 2.64491, "time": 2.09174}
{"mode": "train", "epoch": 3, "iter": 1050, "lr": 0.01, "memory": 9806, "data_time": 0.02559, "loss_cls": 0.59662, "loss_bbox": 0.86323, "loss": 1.45985, "grad_norm": 2.49442, "time": 2.09864}
{"mode": "train", "epoch": 3, "iter": 1100, "lr": 0.01, "memory": 9806, "data_time": 0.02598, "loss_cls": 0.55351, "loss_bbox": 0.8613, "loss": 1.4148, "grad_norm": 2.48673, "time": 2.09972}
{"mode": "train", "epoch": 3, "iter": 1150, "lr": 0.01, "memory": 9806, "data_time": 0.0256, "loss_cls": 0.55818, "loss_bbox": 0.86799, "loss": 1.42617, "grad_norm": 2.44063, "time": 2.10813}
{"mode": "train", "epoch": 3, "iter": 1200, "lr": 0.01, "memory": 9806, "data_time": 0.02578, "loss_cls": 0.57988, "loss_bbox": 0.90454, "loss": 1.48442, "grad_norm": 2.85195, "time": 2.11192}
{"mode": "train", "epoch": 3, "iter": 1250, "lr": 0.01, "memory": 9806, "data_time": 0.0269, "loss_cls": 0.5573, "loss_bbox": 0.84882, "loss": 1.40611, "grad_norm": 2.79874, "time": 2.10686}
{"mode": "train", "epoch": 3, "iter": 1300, "lr": 0.01, "memory": 9806, "data_time": 0.02683, "loss_cls": 0.58105, "loss_bbox": 0.83205, "loss": 1.4131, "grad_norm": 2.40157, "time": 2.1083}
{"mode": "train", "epoch": 3, "iter": 1350, "lr": 0.01, "memory": 9806, "data_time": 0.02597, "loss_cls": 0.57633, "loss_bbox": 0.824, "loss": 1.40033, "grad_norm": 2.58406, "time": 2.11119}
{"mode": "train", "epoch": 4, "iter": 1400, "lr": 0.01, "memory": 9806, "data_time": 2.5359, "loss_cls": 0.66332, "loss_bbox": 0.72429, "loss": 1.38761, "grad_norm": 2.7546, "time": 4.58349}
{"mode": "train", "epoch": 4, "iter": 1450, "lr": 0.01, "memory": 9806, "data_time": 0.02513, "loss_cls": 0.57294, "loss_bbox": 0.78929, "loss": 1.36223, "grad_norm": 2.6735, "time": 2.10265}
{"mode": "train", "epoch": 4, "iter": 1500, "lr": 0.01, "memory": 9806, "data_time": 0.02497, "loss_cls": 0.58931, "loss_bbox": 0.83273, "loss": 1.42203, "grad_norm": 2.71128, "time": 2.09714}
{"mode": "train", "epoch": 4, "iter": 1550, "lr": 0.01, "memory": 9806, "data_time": 0.02608, "loss_cls": 0.55539, "loss_bbox": 0.78513, "loss": 1.34052, "grad_norm": 2.70305, "time": 2.09818}
{"mode": "train", "epoch": 4, "iter": 1600, "lr": 0.01, "memory": 9806, "data_time": 0.02577, "loss_cls": 0.52781, "loss_bbox": 0.83142, "loss": 1.35923, "grad_norm": 2.58057, "time": 2.1082}
{"mode": "train", "epoch": 4, "iter": 1650, "lr": 0.01, "memory": 9806, "data_time": 0.02572, "loss_cls": 0.58767, "loss_bbox": 0.79164, "loss": 1.37931, "grad_norm": 2.86765, "time": 2.09556}
{"mode": "train", "epoch": 4, "iter": 1700, "lr": 0.01, "memory": 9806, "data_time": 0.02554, "loss_cls": 0.54633, "loss_bbox": 0.77928, "loss": 1.3256, "grad_norm": 2.56763, "time": 2.10762}
{"mode": "train", "epoch": 4, "iter": 1750, "lr": 0.01, "memory": 9806, "data_time": 0.02613, "loss_cls": 0.52165, "loss_bbox": 0.73725, "loss": 1.2589, "grad_norm": 2.39411, "time": 2.11092}
{"mode": "train", "epoch": 4, "iter": 1800, "lr": 0.01, "memory": 9806, "data_time": 0.02581, "loss_cls": 0.55085, "loss_bbox": 0.76937, "loss": 1.32022, "grad_norm": 3.06812, "time": 2.1022}
{"mode": "train", "epoch": 4, "iter": 1850, "lr": 0.01, "memory": 9806, "data_time": 0.02667, "loss_cls": 0.55355, "loss_bbox": 0.79578, "loss": 1.34933, "grad_norm": 2.74013, "time": 2.10804}
{"mode": "train", "epoch": 5, "iter": 1900, "lr": 0.01, "memory": 9806, "data_time": 0.34228, "loss_cls": 0.53391, "loss_bbox": 0.7476, "loss": 1.28151, "grad_norm": 2.77605, "time": 2.42921}
{"mode": "train", "epoch": 5, "iter": 1950, "lr": 0.01, "memory": 9806, "data_time": 0.02509, "loss_cls": 0.50059, "loss_bbox": 0.72728, "loss": 1.22787, "grad_norm": 2.58837, "time": 2.10859}
{"mode": "train", "epoch": 5, "iter": 2000, "lr": 0.01, "memory": 9806, "data_time": 0.02507, "loss_cls": 0.52441, "loss_bbox": 0.77232, "loss": 1.29673, "grad_norm": 2.48243, "time": 2.09927}
{"mode": "train", "epoch": 5, "iter": 2050, "lr": 0.01, "memory": 9806, "data_time": 0.02611, "loss_cls": 0.51761, "loss_bbox": 0.74247, "loss": 1.26008, "grad_norm": 2.67486, "time": 2.11308}
{"mode": "train", "epoch": 5, "iter": 2100, "lr": 0.01, "memory": 9806, "data_time": 0.02751, "loss_cls": 0.52838, "loss_bbox": 0.78358, "loss": 1.31197, "grad_norm": 2.85436, "time": 2.11449}
{"mode": "train", "epoch": 5, "iter": 2150, "lr": 0.01, "memory": 9806, "data_time": 0.02684, "loss_cls": 0.51563, "loss_bbox": 0.71301, "loss": 1.22864, "grad_norm": 2.54011, "time": 2.10372}
{"mode": "train", "epoch": 5, "iter": 2200, "lr": 0.01, "memory": 9806, "data_time": 0.02683, "loss_cls": 0.48957, "loss_bbox": 0.70691, "loss": 1.19648, "grad_norm": 2.36778, "time": 2.11007}
{"mode": "train", "epoch": 5, "iter": 2250, "lr": 0.01, "memory": 9806, "data_time": 0.02672, "loss_cls": 0.52835, "loss_bbox": 0.73756, "loss": 1.26591, "grad_norm": 2.85551, "time": 2.11102}
{"mode": "train", "epoch": 5, "iter": 2300, "lr": 0.01, "memory": 9806, "data_time": 0.02655, "loss_cls": 0.50939, "loss_bbox": 0.75054, "loss": 1.25993, "grad_norm": 2.49242, "time": 2.10593}
{"mode": "train", "epoch": 6, "iter": 2350, "lr": 0.01, "memory": 9806, "data_time": 0.53428, "loss_cls": 0.47979, "loss_bbox": 0.6831, "loss": 1.16289, "grad_norm": 2.41835, "time": 2.6295}
{"mode": "train", "epoch": 6, "iter": 2400, "lr": 0.01, "memory": 9806, "data_time": 0.02548, "loss_cls": 0.49554, "loss_bbox": 0.71117, "loss": 1.20671, "grad_norm": 2.49891, "time": 2.07415}
{"mode": "train", "epoch": 6, "iter": 2450, "lr": 0.01, "memory": 9806, "data_time": 0.02553, "loss_cls": 0.50369, "loss_bbox": 0.71886, "loss": 1.22255, "grad_norm": 2.76754, "time": 2.09135}
{"mode": "train", "epoch": 6, "iter": 2500, "lr": 0.01, "memory": 9806, "data_time": 0.02557, "loss_cls": 0.47039, "loss_bbox": 0.7019, "loss": 1.17229, "grad_norm": 2.5545, "time": 2.10669}
{"mode": "train", "epoch": 6, "iter": 2550, "lr": 0.01, "memory": 9806, "data_time": 0.02505, "loss_cls": 0.49774, "loss_bbox": 0.70101, "loss": 1.19875, "grad_norm": 2.59788, "time": 2.09553}
{"mode": "train", "epoch": 6, "iter": 2600, "lr": 0.01, "memory": 9806, "data_time": 0.02597, "loss_cls": 0.51807, "loss_bbox": 0.74474, "loss": 1.26281, "grad_norm": 2.74708, "time": 2.11076}
{"mode": "train", "epoch": 6, "iter": 2650, "lr": 0.01, "memory": 9806, "data_time": 0.02578, "loss_cls": 0.47691, "loss_bbox": 0.72389, "loss": 1.2008, "grad_norm": 2.43552, "time": 2.09645}
{"mode": "train", "epoch": 6, "iter": 2700, "lr": 0.01, "memory": 9806, "data_time": 0.02605, "loss_cls": 0.50494, "loss_bbox": 0.70168, "loss": 1.20662, "grad_norm": 2.69125, "time": 2.09607}
{"mode": "train", "epoch": 6, "iter": 2750, "lr": 0.01, "memory": 9806, "data_time": 0.02631, "loss_cls": 0.47261, "loss_bbox": 0.70773, "loss": 1.18034, "grad_norm": 2.44719, "time": 2.11188}
{"mode": "train", "epoch": 7, "iter": 2800, "lr": 0.01, "memory": 9806, "data_time": 1.27483, "loss_cls": 0.51658, "loss_bbox": 0.68346, "loss": 1.20004, "grad_norm": 2.96484, "time": 3.34188}
{"mode": "train", "epoch": 7, "iter": 2850, "lr": 0.01, "memory": 9806, "data_time": 0.02615, "loss_cls": 0.48983, "loss_bbox": 0.74384, "loss": 1.23367, "grad_norm": 2.74234, "time": 2.11815}
{"mode": "train", "epoch": 7, "iter": 2900, "lr": 0.01, "memory": 9806, "data_time": 0.02614, "loss_cls": 0.4768, "loss_bbox": 0.68157, "loss": 1.15836, "grad_norm": 2.36585, "time": 2.10916}
{"mode": "train", "epoch": 7, "iter": 2950, "lr": 0.01, "memory": 9806, "data_time": 0.02595, "loss_cls": 0.47673, "loss_bbox": 0.68872, "loss": 1.16545, "grad_norm": 2.21289, "time": 2.11091}
{"mode": "train", "epoch": 7, "iter": 3000, "lr": 0.01, "memory": 9806, "data_time": 0.02544, "loss_cls": 0.47036, "loss_bbox": 0.67791, "loss": 1.14827, "grad_norm": 2.40038, "time": 2.09113}
{"mode": "train", "epoch": 7, "iter": 3050, "lr": 0.01, "memory": 9806, "data_time": 0.026, "loss_cls": 0.4714, "loss_bbox": 0.68866, "loss": 1.16006, "grad_norm": 2.67008, "time": 2.10775}
{"mode": "train", "epoch": 7, "iter": 3100, "lr": 0.01, "memory": 9806, "data_time": 0.02583, "loss_cls": 0.48387, "loss_bbox": 0.67718, "loss": 1.16105, "grad_norm": 2.62876, "time": 2.11264}
{"mode": "train", "epoch": 7, "iter": 3150, "lr": 0.01, "memory": 9806, "data_time": 0.02603, "loss_cls": 0.48884, "loss_bbox": 0.67509, "loss": 1.16393, "grad_norm": 2.83981, "time": 2.10516}
{"mode": "train", "epoch": 7, "iter": 3200, "lr": 0.01, "memory": 9806, "data_time": 0.02586, "loss_cls": 0.47099, "loss_bbox": 0.67068, "loss": 1.14167, "grad_norm": 2.40154, "time": 2.09346}
{"mode": "train", "epoch": 7, "iter": 3250, "lr": 0.01, "memory": 9806, "data_time": 0.02589, "loss_cls": 0.46911, "loss_bbox": 0.68944, "loss": 1.15855, "grad_norm": 2.7124, "time": 2.10672}
