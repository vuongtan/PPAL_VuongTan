{"mmdet_version": "2.20.0f3aac93", "CLASSES": ["pedestrian", "people", "bicycle", "car", "van", "truck", "tricycle", "awning-tricycle", "bus", "motor"], "env_info": "sys.platform: linux\nPython: 3.10.12 (main, Nov 20 2023, 15:14:05) [GCC 11.4.0]\nCUDA available: True\nGPU 0: Tesla T4\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 12.2, V12.2.140\nGCC: x86_64-linux-gnu-gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\nPyTorch: 1.11.0+cu113\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.12.0+cu113\nOpenCV: 4.8.0\nMMCV: 1.5.0\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.3\nMMDetection: 2.20.0+f3aac93", "config": "model = dict(\n    type='RetinaNet',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=False),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint='data/pretrain_models/resnet50-19c8e357.pth')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs='on_input',\n        num_outs=5),\n    bbox_head=dict(\n        type='RetinaQualityEMAHead',\n        num_classes=10,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            octave_base_scale=4,\n            scales_per_octave=3,\n            ratios=[0.5, 1.0, 2.0],\n            strides=[8, 16, 32, 64, 128]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0),\n        base_momentum=0.99),\n    train_cfg=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.4,\n            min_pos_iou=0,\n            ignore_iof_thr=-1),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    test_cfg=dict(\n        nms_pre=5000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100))\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[20])\nrunner = dict(type='EpochBasedRunner', max_epochs=30)\ncheckpoint_config = dict(interval=10, max_keep_ckpts=1, by_epoch=True)\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nmmdet_base = '../../_base_'\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        'work_dirs/retinanet_coco_ppal_5rounds_2percent_to_10percent/round8/annotations/labeled.json',\n        img_prefix='data/coco/train2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='data/coco/annotations/instances_val2017.json',\n        img_prefix='data/coco/val2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='data/coco/annotations/instances_val2017.json',\n        img_prefix='data/coco/val2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlabeled_data = 'work_dirs/retinanet_coco_ppal_5rounds_2percent_to_10percent/round8/annotations/labeled.json'\nunlabeled_data = 'work_dirs/retinanet_coco_ppal_5rounds_2percent_to_10percent/round8/annotations/unlabeled.json'\nevaluation = dict(interval=999999, metric='bbox')\nwork_dir = 'work_dirs/retinanet_coco_ppal_5rounds_2percent_to_10percent/round8'\nauto_resume = False\ngpu_ids = range(0, 1)\n", "seed": 1250229018, "exp_name": "retinanet_26e.py", "epoch": 20, "iter": 22320, "mmcv_version": "1.5.0", "time": "Wed Jan 24 18:36:29 2024", "hook_msgs": {"last_ckpt": "/content/drive/MyDrive/PPALVuongTan/PPAL/work_dirs/retinanet_coco_ppal_5rounds_2percent_to_10percent/round8/epoch_10.pth"}}
{"mode": "train", "epoch": 21, "iter": 22350, "lr": 0.001, "memory": 6543, "data_time": 0.39617, "loss_cls": 0.35276, "loss_bbox": 0.48584, "loss": 0.83859, "grad_norm": 2.24251, "time": 1.5948}
{"mode": "train", "epoch": 21, "iter": 22400, "lr": 0.001, "memory": 6749, "data_time": 0.01463, "loss_cls": 0.33101, "loss_bbox": 0.46283, "loss": 0.79385, "grad_norm": 2.17564, "time": 1.27822}
{"mode": "train", "epoch": 21, "iter": 22450, "lr": 0.001, "memory": 6749, "data_time": 0.01523, "loss_cls": 0.32181, "loss_bbox": 0.47038, "loss": 0.79219, "grad_norm": 2.19055, "time": 1.33987}
{"mode": "train", "epoch": 21, "iter": 22500, "lr": 0.001, "memory": 6749, "data_time": 0.0153, "loss_cls": 0.31072, "loss_bbox": 0.44283, "loss": 0.75355, "grad_norm": 2.32631, "time": 1.34031}
{"mode": "train", "epoch": 21, "iter": 22550, "lr": 0.001, "memory": 6749, "data_time": 0.01595, "loss_cls": 0.30477, "loss_bbox": 0.47434, "loss": 0.77911, "grad_norm": 2.14841, "time": 1.34303}
{"mode": "train", "epoch": 21, "iter": 22600, "lr": 0.001, "memory": 6749, "data_time": 0.01577, "loss_cls": 0.30285, "loss_bbox": 0.46126, "loss": 0.76411, "grad_norm": 2.47506, "time": 1.33361}
{"mode": "train", "epoch": 21, "iter": 22650, "lr": 0.001, "memory": 7104, "data_time": 0.01562, "loss_cls": 0.3099, "loss_bbox": 0.45262, "loss": 0.76252, "grad_norm": 2.14431, "time": 1.32968}
{"mode": "train", "epoch": 21, "iter": 22700, "lr": 0.001, "memory": 7104, "data_time": 0.01579, "loss_cls": 0.3054, "loss_bbox": 0.46383, "loss": 0.76923, "grad_norm": 2.07313, "time": 1.33376}
{"mode": "train", "epoch": 21, "iter": 22750, "lr": 0.001, "memory": 7104, "data_time": 0.01585, "loss_cls": 0.3108, "loss_bbox": 0.45875, "loss": 0.76955, "grad_norm": 2.11025, "time": 1.33847}
{"mode": "train", "epoch": 21, "iter": 22800, "lr": 0.001, "memory": 7653, "data_time": 0.01563, "loss_cls": 0.30705, "loss_bbox": 0.46249, "loss": 0.76953, "grad_norm": 2.14856, "time": 1.31535}
{"mode": "train", "epoch": 21, "iter": 22850, "lr": 0.001, "memory": 7653, "data_time": 0.01608, "loss_cls": 0.30961, "loss_bbox": 0.44609, "loss": 0.7557, "grad_norm": 2.21462, "time": 1.32909}
{"mode": "train", "epoch": 21, "iter": 22900, "lr": 0.001, "memory": 7653, "data_time": 0.01654, "loss_cls": 0.3092, "loss_bbox": 0.4446, "loss": 0.75379, "grad_norm": 2.1988, "time": 1.33008}
{"mode": "train", "epoch": 21, "iter": 22950, "lr": 0.001, "memory": 7653, "data_time": 0.01631, "loss_cls": 0.29817, "loss_bbox": 0.45722, "loss": 0.75538, "grad_norm": 2.10583, "time": 1.33083}
{"mode": "train", "epoch": 21, "iter": 23000, "lr": 0.001, "memory": 7653, "data_time": 0.01627, "loss_cls": 0.29141, "loss_bbox": 0.44254, "loss": 0.73395, "grad_norm": 2.1223, "time": 1.33393}
{"mode": "train", "epoch": 21, "iter": 23050, "lr": 0.001, "memory": 7653, "data_time": 0.01615, "loss_cls": 0.30716, "loss_bbox": 0.44353, "loss": 0.75068, "grad_norm": 2.34102, "time": 1.33238}
{"mode": "train", "epoch": 21, "iter": 23100, "lr": 0.001, "memory": 11489, "data_time": 0.01634, "loss_cls": 0.3055, "loss_bbox": 0.45905, "loss": 0.76455, "grad_norm": 2.33458, "time": 1.33537}
{"mode": "train", "epoch": 21, "iter": 23150, "lr": 0.001, "memory": 11489, "data_time": 0.01636, "loss_cls": 0.30481, "loss_bbox": 0.43925, "loss": 0.74406, "grad_norm": 2.27119, "time": 1.31832}
{"mode": "train", "epoch": 21, "iter": 23200, "lr": 0.001, "memory": 11489, "data_time": 0.01618, "loss_cls": 0.3073, "loss_bbox": 0.44691, "loss": 0.75421, "grad_norm": 2.20821, "time": 1.32125}
{"mode": "train", "epoch": 21, "iter": 23250, "lr": 0.001, "memory": 11489, "data_time": 0.01625, "loss_cls": 0.29535, "loss_bbox": 0.43913, "loss": 0.73447, "grad_norm": 2.1413, "time": 1.34506}
{"mode": "train", "epoch": 21, "iter": 23300, "lr": 0.001, "memory": 11489, "data_time": 0.01643, "loss_cls": 0.29248, "loss_bbox": 0.44132, "loss": 0.7338, "grad_norm": 2.2619, "time": 1.34081}
{"mode": "train", "epoch": 21, "iter": 23350, "lr": 0.001, "memory": 11489, "data_time": 0.01592, "loss_cls": 0.31293, "loss_bbox": 0.4525, "loss": 0.76543, "grad_norm": 2.30386, "time": 1.31797}
{"mode": "train", "epoch": 21, "iter": 23400, "lr": 0.001, "memory": 11489, "data_time": 0.01614, "loss_cls": 0.29197, "loss_bbox": 0.42773, "loss": 0.7197, "grad_norm": 2.17201, "time": 1.32221}
{"mode": "train", "epoch": 22, "iter": 23450, "lr": 0.001, "memory": 11489, "data_time": 0.82641, "loss_cls": 0.2961, "loss_bbox": 0.44195, "loss": 0.73805, "grad_norm": 2.22806, "time": 2.14498}
{"mode": "train", "epoch": 22, "iter": 23500, "lr": 0.001, "memory": 11489, "data_time": 0.01421, "loss_cls": 0.29515, "loss_bbox": 0.42777, "loss": 0.72292, "grad_norm": 2.13525, "time": 1.35101}
{"mode": "train", "epoch": 22, "iter": 23550, "lr": 0.001, "memory": 11489, "data_time": 0.01482, "loss_cls": 0.29548, "loss_bbox": 0.43476, "loss": 0.73025, "grad_norm": 2.22199, "time": 1.33299}
{"mode": "train", "epoch": 22, "iter": 23600, "lr": 0.001, "memory": 11489, "data_time": 0.01501, "loss_cls": 0.28958, "loss_bbox": 0.43084, "loss": 0.72041, "grad_norm": 2.12557, "time": 1.32519}
{"mode": "train", "epoch": 22, "iter": 23650, "lr": 0.001, "memory": 11489, "data_time": 0.01502, "loss_cls": 0.28846, "loss_bbox": 0.42954, "loss": 0.718, "grad_norm": 2.01468, "time": 1.33034}
{"mode": "train", "epoch": 22, "iter": 23700, "lr": 0.001, "memory": 11489, "data_time": 0.01549, "loss_cls": 0.30079, "loss_bbox": 0.4508, "loss": 0.75159, "grad_norm": 2.17861, "time": 1.32801}
{"mode": "train", "epoch": 22, "iter": 23750, "lr": 0.001, "memory": 11489, "data_time": 0.01595, "loss_cls": 0.30062, "loss_bbox": 0.41789, "loss": 0.71851, "grad_norm": 2.3612, "time": 1.32486}
{"mode": "train", "epoch": 22, "iter": 23800, "lr": 0.001, "memory": 11489, "data_time": 0.01555, "loss_cls": 0.29113, "loss_bbox": 0.43276, "loss": 0.7239, "grad_norm": 2.28952, "time": 1.30233}
{"mode": "train", "epoch": 22, "iter": 23850, "lr": 0.001, "memory": 11489, "data_time": 0.01534, "loss_cls": 0.28881, "loss_bbox": 0.42902, "loss": 0.71783, "grad_norm": 2.25919, "time": 1.31}
{"mode": "train", "epoch": 22, "iter": 23900, "lr": 0.001, "memory": 11489, "data_time": 0.0159, "loss_cls": 0.28234, "loss_bbox": 0.42116, "loss": 0.7035, "grad_norm": 2.23802, "time": 1.32983}
{"mode": "train", "epoch": 22, "iter": 23950, "lr": 0.001, "memory": 11489, "data_time": 0.01613, "loss_cls": 0.29588, "loss_bbox": 0.41343, "loss": 0.70931, "grad_norm": 2.23794, "time": 1.32347}
{"mode": "train", "epoch": 22, "iter": 24000, "lr": 0.001, "memory": 11489, "data_time": 0.01594, "loss_cls": 0.28711, "loss_bbox": 0.43846, "loss": 0.72557, "grad_norm": 2.2658, "time": 1.32497}
{"mode": "train", "epoch": 22, "iter": 24050, "lr": 0.001, "memory": 11489, "data_time": 0.01605, "loss_cls": 0.28494, "loss_bbox": 0.43105, "loss": 0.71599, "grad_norm": 2.20369, "time": 1.3479}
{"mode": "train", "epoch": 22, "iter": 24100, "lr": 0.001, "memory": 11489, "data_time": 0.01637, "loss_cls": 0.30009, "loss_bbox": 0.43215, "loss": 0.73224, "grad_norm": 2.3635, "time": 1.31387}
{"mode": "train", "epoch": 22, "iter": 24150, "lr": 0.001, "memory": 11489, "data_time": 0.01622, "loss_cls": 0.2893, "loss_bbox": 0.44677, "loss": 0.73607, "grad_norm": 2.14856, "time": 1.32715}
{"mode": "train", "epoch": 22, "iter": 24200, "lr": 0.001, "memory": 11489, "data_time": 0.01656, "loss_cls": 0.3089, "loss_bbox": 0.43225, "loss": 0.74115, "grad_norm": 2.22625, "time": 1.3385}
{"mode": "train", "epoch": 22, "iter": 24250, "lr": 0.001, "memory": 11489, "data_time": 0.01659, "loss_cls": 0.29572, "loss_bbox": 0.42847, "loss": 0.7242, "grad_norm": 2.32024, "time": 1.33671}
{"mode": "train", "epoch": 22, "iter": 24300, "lr": 0.001, "memory": 11489, "data_time": 0.01633, "loss_cls": 0.30126, "loss_bbox": 0.44202, "loss": 0.74328, "grad_norm": 2.31164, "time": 1.32785}
{"mode": "train", "epoch": 22, "iter": 24350, "lr": 0.001, "memory": 11489, "data_time": 0.01605, "loss_cls": 0.28593, "loss_bbox": 0.42476, "loss": 0.71069, "grad_norm": 2.06246, "time": 1.33804}
{"mode": "train", "epoch": 22, "iter": 24400, "lr": 0.001, "memory": 11489, "data_time": 0.01625, "loss_cls": 0.28481, "loss_bbox": 0.4543, "loss": 0.73911, "grad_norm": 2.18138, "time": 1.33744}
{"mode": "train", "epoch": 22, "iter": 24450, "lr": 0.001, "memory": 11489, "data_time": 0.01651, "loss_cls": 0.30273, "loss_bbox": 0.43678, "loss": 0.7395, "grad_norm": 2.21914, "time": 1.32332}
