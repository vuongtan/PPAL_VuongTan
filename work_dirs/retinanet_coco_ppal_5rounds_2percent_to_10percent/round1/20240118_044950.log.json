{"env_info": "sys.platform: linux\nPython: 3.10.12 (main, Nov 20 2023, 15:14:05) [GCC 11.4.0]\nCUDA available: True\nGPU 0: Tesla T4\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 12.2, V12.2.140\nGCC: x86_64-linux-gnu-gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\nPyTorch: 1.11.0+cu113\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.12.0+cu113\nOpenCV: 4.8.0\nMMCV: 1.5.0\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.3\nMMDetection: 2.20.0+f3aac93", "config": "model = dict(\n    type='RetinaNet',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=False),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint='data/pretrain_models/resnet50-19c8e357.pth')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs='on_input',\n        num_outs=5),\n    bbox_head=dict(\n        type='RetinaQualityEMAHead',\n        num_classes=10,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            octave_base_scale=4,\n            scales_per_octave=3,\n            ratios=[0.5, 1.0, 2.0],\n            strides=[8, 16, 32, 64, 128]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0),\n        base_momentum=0.99),\n    train_cfg=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.4,\n            min_pos_iou=0,\n            ignore_iof_thr=-1),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    test_cfg=dict(\n        nms_pre=5000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100))\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[20])\nrunner = dict(type='EpochBasedRunner', max_epochs=30)\ncheckpoint_config = dict(interval=30, max_keep_ckpts=1, by_epoch=True)\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nmmdet_base = '../../_base_'\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=6,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        'work_dirs/retinanet_coco_ppal_5rounds_2percent_to_10percent/round1/annotations/labeled.json',\n        img_prefix='data/coco/train2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='data/coco/annotations/instances_val2017.json',\n        img_prefix='data/coco/val2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='data/coco/annotations/instances_val2017.json',\n        img_prefix='data/coco/val2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlabeled_data = 'work_dirs/retinanet_coco_ppal_5rounds_2percent_to_10percent/round1/annotations/labeled.json'\nunlabeled_data = 'work_dirs/retinanet_coco_ppal_5rounds_2percent_to_10percent/round1/annotations/unlabeled.json'\nevaluation = dict(interval=999999, metric='bbox')\nwork_dir = 'work_dirs/retinanet_coco_ppal_5rounds_2percent_to_10percent/round1'\nauto_resume = False\ngpu_ids = range(0, 1)\n", "seed": 801007425, "exp_name": "retinanet_26e.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00099, "memory": 8961, "data_time": 0.27076, "loss_cls": 1.14112, "loss_bbox": 2.28105, "loss": 3.42217, "grad_norm": 4.83583, "time": 2.21454}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.00199, "memory": 9034, "data_time": 1.60349, "loss_cls": 0.9191, "loss_bbox": 1.28887, "loss": 2.20798, "grad_norm": 12.4725, "time": 3.69803}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.00299, "memory": 9034, "data_time": 0.02172, "loss_cls": 1.07034, "loss_bbox": 1.25634, "loss": 2.32668, "grad_norm": 8.70488, "time": 2.12277}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.00399, "memory": 9046, "data_time": 0.79865, "loss_cls": 1.08699, "loss_bbox": 1.06566, "loss": 2.15265, "grad_norm": 5.39316, "time": 2.92208}
{"mode": "train", "epoch": 3, "iter": 250, "lr": 0.00499, "memory": 9046, "data_time": 0.02196, "loss_cls": 0.99256, "loss_bbox": 1.19873, "loss": 2.19128, "grad_norm": 5.00667, "time": 2.1112}
{"mode": "train", "epoch": 4, "iter": 300, "lr": 0.00598, "memory": 9046, "data_time": 0.56193, "loss_cls": 1.01483, "loss_bbox": 1.13888, "loss": 2.1537, "grad_norm": 1.06038, "time": 2.66835}
{"mode": "train", "epoch": 4, "iter": 350, "lr": 0.00698, "memory": 9046, "data_time": 0.02249, "loss_cls": 0.90379, "loss_bbox": 1.14603, "loss": 2.04982, "grad_norm": 2.89181, "time": 2.09183}
{"mode": "train", "epoch": 5, "iter": 400, "lr": 0.00798, "memory": 9046, "data_time": 0.4141, "loss_cls": 0.87105, "loss_bbox": 1.16152, "loss": 2.03257, "grad_norm": 2.97022, "time": 2.52829}
{"mode": "train", "epoch": 5, "iter": 450, "lr": 0.00898, "memory": 9046, "data_time": 0.02211, "loss_cls": 0.85136, "loss_bbox": 1.14618, "loss": 1.99755, "grad_norm": 2.52266, "time": 2.10213}
{"mode": "train", "epoch": 6, "iter": 500, "lr": 0.00998, "memory": 9046, "data_time": 0.33713, "loss_cls": 0.72975, "loss_bbox": 1.03279, "loss": 1.76254, "grad_norm": 3.3083, "time": 2.43003}
{"mode": "train", "epoch": 6, "iter": 550, "lr": 0.01, "memory": 9046, "data_time": 0.02278, "loss_cls": 0.70839, "loss_bbox": 0.97756, "loss": 1.68595, "grad_norm": 3.10859, "time": 2.09412}
{"mode": "train", "epoch": 7, "iter": 600, "lr": 0.01, "memory": 9046, "data_time": 0.28606, "loss_cls": 0.64747, "loss_bbox": 0.9728, "loss": 1.62028, "grad_norm": 3.14008, "time": 2.37838}
{"mode": "train", "epoch": 7, "iter": 650, "lr": 0.01, "memory": 9046, "data_time": 0.02271, "loss_cls": 0.6434, "loss_bbox": 0.95607, "loss": 1.59948, "grad_norm": 2.9237, "time": 2.09261}
{"mode": "train", "epoch": 8, "iter": 700, "lr": 0.01, "memory": 9046, "data_time": 0.25041, "loss_cls": 0.58042, "loss_bbox": 0.91157, "loss": 1.49199, "grad_norm": 2.58621, "time": 2.33405}
{"mode": "train", "epoch": 9, "iter": 750, "lr": 0.01, "memory": 9046, "data_time": 1.84487, "loss_cls": 0.58738, "loss_bbox": 0.84907, "loss": 1.43645, "grad_norm": 2.94278, "time": 3.89552}
{"mode": "train", "epoch": 9, "iter": 800, "lr": 0.01, "memory": 9046, "data_time": 0.02241, "loss_cls": 0.59358, "loss_bbox": 0.88984, "loss": 1.48342, "grad_norm": 2.90402, "time": 2.11575}
{"mode": "train", "epoch": 10, "iter": 850, "lr": 0.01, "memory": 9047, "data_time": 0.88553, "loss_cls": 0.55174, "loss_bbox": 0.84669, "loss": 1.39842, "grad_norm": 3.09619, "time": 2.975}
{"mode": "train", "epoch": 10, "iter": 900, "lr": 0.01, "memory": 9047, "data_time": 0.0229, "loss_cls": 0.5446, "loss_bbox": 0.83724, "loss": 1.38185, "grad_norm": 2.7114, "time": 2.10346}
{"mode": "train", "epoch": 11, "iter": 950, "lr": 0.01, "memory": 9047, "data_time": 0.56141, "loss_cls": 0.53279, "loss_bbox": 0.85502, "loss": 1.38781, "grad_norm": 2.57801, "time": 2.67807}
{"mode": "train", "epoch": 11, "iter": 1000, "lr": 0.01, "memory": 9047, "data_time": 0.02305, "loss_cls": 0.53609, "loss_bbox": 0.85562, "loss": 1.39171, "grad_norm": 3.00657, "time": 2.08993}
{"mode": "train", "epoch": 12, "iter": 1050, "lr": 0.01, "memory": 9047, "data_time": 0.44718, "loss_cls": 0.5199, "loss_bbox": 0.8145, "loss": 1.3344, "grad_norm": 2.877, "time": 2.55174}
{"mode": "train", "epoch": 12, "iter": 1100, "lr": 0.01, "memory": 9047, "data_time": 0.02334, "loss_cls": 0.51638, "loss_bbox": 0.80034, "loss": 1.31672, "grad_norm": 2.91884, "time": 2.09482}
{"mode": "train", "epoch": 13, "iter": 1150, "lr": 0.01, "memory": 9047, "data_time": 0.35338, "loss_cls": 0.51631, "loss_bbox": 0.78833, "loss": 1.30464, "grad_norm": 2.84243, "time": 2.44151}
{"mode": "train", "epoch": 13, "iter": 1200, "lr": 0.01, "memory": 9047, "data_time": 0.02308, "loss_cls": 0.49183, "loss_bbox": 0.7909, "loss": 1.28274, "grad_norm": 2.9426, "time": 2.0911}
{"mode": "train", "epoch": 14, "iter": 1250, "lr": 0.01, "memory": 9047, "data_time": 0.30248, "loss_cls": 0.49508, "loss_bbox": 0.72767, "loss": 1.22275, "grad_norm": 3.32486, "time": 2.39606}
{"mode": "train", "epoch": 14, "iter": 1300, "lr": 0.01, "memory": 9047, "data_time": 0.02317, "loss_cls": 0.50087, "loss_bbox": 0.78178, "loss": 1.28265, "grad_norm": 3.22508, "time": 2.10316}
{"mode": "train", "epoch": 15, "iter": 1350, "lr": 0.01, "memory": 9047, "data_time": 0.25424, "loss_cls": 0.48932, "loss_bbox": 0.76767, "loss": 1.25699, "grad_norm": 3.30186, "time": 2.33361}
{"mode": "train", "epoch": 16, "iter": 1400, "lr": 0.01, "memory": 9047, "data_time": 2.27957, "loss_cls": 0.41353, "loss_bbox": 0.67929, "loss": 1.09282, "grad_norm": 3.42275, "time": 4.33786}
{"mode": "train", "epoch": 16, "iter": 1450, "lr": 0.01, "memory": 9047, "data_time": 0.02318, "loss_cls": 0.47466, "loss_bbox": 0.70692, "loss": 1.18158, "grad_norm": 3.29375, "time": 2.10677}
{"mode": "train", "epoch": 17, "iter": 1500, "lr": 0.01, "memory": 9047, "data_time": 0.93868, "loss_cls": 0.46459, "loss_bbox": 0.69887, "loss": 1.16346, "grad_norm": 3.11612, "time": 3.02819}
{"mode": "train", "epoch": 17, "iter": 1550, "lr": 0.01, "memory": 9047, "data_time": 0.02273, "loss_cls": 0.45293, "loss_bbox": 0.70082, "loss": 1.15375, "grad_norm": 3.15433, "time": 2.08574}
{"mode": "train", "epoch": 18, "iter": 1600, "lr": 0.01, "memory": 9047, "data_time": 0.5997, "loss_cls": 0.41815, "loss_bbox": 0.69031, "loss": 1.10845, "grad_norm": 3.35727, "time": 2.7168}
{"mode": "train", "epoch": 18, "iter": 1650, "lr": 0.01, "memory": 9047, "data_time": 0.02341, "loss_cls": 0.43812, "loss_bbox": 0.68605, "loss": 1.12418, "grad_norm": 3.28518, "time": 2.10794}
{"mode": "train", "epoch": 19, "iter": 1700, "lr": 0.01, "memory": 9047, "data_time": 0.4457, "loss_cls": 0.44188, "loss_bbox": 0.64627, "loss": 1.08815, "grad_norm": 3.04701, "time": 2.55581}
{"mode": "train", "epoch": 19, "iter": 1750, "lr": 0.01, "memory": 9047, "data_time": 0.02266, "loss_cls": 0.42933, "loss_bbox": 0.67584, "loss": 1.10518, "grad_norm": 3.20397, "time": 2.088}
{"mode": "train", "epoch": 20, "iter": 1800, "lr": 0.01, "memory": 9047, "data_time": 0.35202, "loss_cls": 0.45403, "loss_bbox": 0.71165, "loss": 1.16568, "grad_norm": 3.59595, "time": 2.45738}
{"mode": "train", "epoch": 20, "iter": 1850, "lr": 0.01, "memory": 9047, "data_time": 0.02283, "loss_cls": 0.43674, "loss_bbox": 0.64443, "loss": 1.08117, "grad_norm": 3.04694, "time": 2.10524}
{"mode": "train", "epoch": 21, "iter": 1900, "lr": 0.001, "memory": 9047, "data_time": 0.29099, "loss_cls": 0.3865, "loss_bbox": 0.58788, "loss": 0.97438, "grad_norm": 2.34667, "time": 2.38636}
{"mode": "train", "epoch": 21, "iter": 1950, "lr": 0.001, "memory": 9047, "data_time": 0.02241, "loss_cls": 0.40575, "loss_bbox": 0.56851, "loss": 0.97426, "grad_norm": 2.44861, "time": 2.09353}
{"mode": "train", "epoch": 22, "iter": 2000, "lr": 0.001, "memory": 9047, "data_time": 0.25397, "loss_cls": 0.38752, "loss_bbox": 0.56283, "loss": 0.95035, "grad_norm": 2.10365, "time": 2.33304}
{"mode": "train", "epoch": 23, "iter": 2050, "lr": 0.001, "memory": 9047, "data_time": 2.77544, "loss_cls": 0.365, "loss_bbox": 0.5326, "loss": 0.8976, "grad_norm": 2.35537, "time": 4.82313}
{"mode": "train", "epoch": 23, "iter": 2100, "lr": 0.001, "memory": 9047, "data_time": 0.02253, "loss_cls": 0.38461, "loss_bbox": 0.54833, "loss": 0.93293, "grad_norm": 2.1092, "time": 2.10784}
{"mode": "train", "epoch": 24, "iter": 2150, "lr": 0.001, "memory": 9047, "data_time": 1.00737, "loss_cls": 0.35831, "loss_bbox": 0.54057, "loss": 0.89888, "grad_norm": 2.12031, "time": 3.09436}
{"mode": "train", "epoch": 24, "iter": 2200, "lr": 0.001, "memory": 9047, "data_time": 0.02284, "loss_cls": 0.37109, "loss_bbox": 0.53765, "loss": 0.90874, "grad_norm": 2.23104, "time": 2.11354}
{"mode": "train", "epoch": 25, "iter": 2250, "lr": 0.001, "memory": 9047, "data_time": 0.66571, "loss_cls": 0.3678, "loss_bbox": 0.51883, "loss": 0.88664, "grad_norm": 2.07449, "time": 2.76262}
{"mode": "train", "epoch": 25, "iter": 2300, "lr": 0.001, "memory": 9047, "data_time": 0.02379, "loss_cls": 0.37133, "loss_bbox": 0.51728, "loss": 0.88861, "grad_norm": 2.21423, "time": 2.11052}
{"mode": "train", "epoch": 26, "iter": 2350, "lr": 0.001, "memory": 9047, "data_time": 0.47722, "loss_cls": 0.36404, "loss_bbox": 0.51688, "loss": 0.88091, "grad_norm": 2.18124, "time": 2.58315}
{"mode": "train", "epoch": 26, "iter": 2400, "lr": 0.001, "memory": 9047, "data_time": 0.02357, "loss_cls": 0.36537, "loss_bbox": 0.51727, "loss": 0.88264, "grad_norm": 2.20036, "time": 2.08839}
{"mode": "train", "epoch": 27, "iter": 2450, "lr": 0.001, "memory": 9047, "data_time": 0.37634, "loss_cls": 0.3707, "loss_bbox": 0.49009, "loss": 0.86078, "grad_norm": 2.29668, "time": 2.46356}
{"mode": "train", "epoch": 27, "iter": 2500, "lr": 0.001, "memory": 9047, "data_time": 0.02351, "loss_cls": 0.36675, "loss_bbox": 0.51183, "loss": 0.87858, "grad_norm": 2.29695, "time": 2.09787}
{"mode": "train", "epoch": 28, "iter": 2550, "lr": 0.001, "memory": 9047, "data_time": 0.31323, "loss_cls": 0.34678, "loss_bbox": 0.48946, "loss": 0.83624, "grad_norm": 2.2545, "time": 2.38985}
{"mode": "train", "epoch": 28, "iter": 2600, "lr": 0.001, "memory": 9047, "data_time": 0.02333, "loss_cls": 0.37335, "loss_bbox": 0.50671, "loss": 0.88006, "grad_norm": 2.38899, "time": 2.10946}
{"mode": "train", "epoch": 29, "iter": 2650, "lr": 0.001, "memory": 9047, "data_time": 0.26726, "loss_cls": 0.35849, "loss_bbox": 0.48391, "loss": 0.8424, "grad_norm": 2.22833, "time": 2.36301}
{"mode": "train", "epoch": 30, "iter": 2700, "lr": 0.001, "memory": 9047, "data_time": 3.77466, "loss_cls": 0.3341, "loss_bbox": 0.5329, "loss": 0.867, "grad_norm": 2.14915, "time": 5.82016}
{"mode": "train", "epoch": 30, "iter": 2750, "lr": 0.001, "memory": 9047, "data_time": 0.0236, "loss_cls": 0.35042, "loss_bbox": 0.47034, "loss": 0.82076, "grad_norm": 2.33319, "time": 2.11}
