2024-01-20 02:51:28,242 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.10.12 (main, Nov 20 2023, 15:14:05) [GCC 11.4.0]
CUDA available: True
GPU 0: Tesla T4
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 12.2, V12.2.140
GCC: x86_64-linux-gnu-gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
PyTorch: 1.11.0+cu113
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.12.0+cu113
OpenCV: 4.8.0
MMCV: 1.5.0
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.3
MMDetection: 2.20.0+f3aac93
------------------------------------------------------------

2024-01-20 02:51:28,450 - mmdet - INFO - Distributed training: True
2024-01-20 02:51:28,754 - mmdet - INFO - Config:
model = dict(
    type='RetinaNet',
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=False),
        norm_eval=True,
        style='pytorch',
        init_cfg=dict(
            type='Pretrained',
            checkpoint='data/pretrain_models/resnet50-19c8e357.pth')),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        start_level=1,
        add_extra_convs='on_input',
        num_outs=5),
    bbox_head=dict(
        type='RetinaQualityEMAHead',
        num_classes=10,
        in_channels=256,
        stacked_convs=4,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            octave_base_scale=4,
            scales_per_octave=3,
            ratios=[0.5, 1.0, 2.0],
            strides=[8, 16, 32, 64, 128]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='FocalLoss',
            use_sigmoid=True,
            gamma=2.0,
            alpha=0.25,
            loss_weight=1.0),
        loss_bbox=dict(type='L1Loss', loss_weight=1.0),
        base_momentum=0.99),
    train_cfg=dict(
        assigner=dict(
            type='MaxIoUAssigner',
            pos_iou_thr=0.5,
            neg_iou_thr=0.4,
            min_pos_iou=0,
            ignore_iof_thr=-1),
        allowed_border=-1,
        pos_weight=-1,
        debug=False),
    test_cfg=dict(
        nms_pre=5000,
        min_bbox_size=0,
        score_thr=0.05,
        nms=dict(type='nms', iou_threshold=0.5),
        max_per_img=100))
optimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.001,
    step=[20])
runner = dict(type='EpochBasedRunner', max_epochs=30)
checkpoint_config = dict(interval=30, max_keep_ckpts=1, by_epoch=True)
log_config = dict(
    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
mmdet_base = '../../_base_'
dataset_type = 'CocoDataset'
data_root = 'data/coco/'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size_divisor=32),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1333, 800),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=6,
    workers_per_gpu=2,
    train=dict(
        type='CocoDataset',
        ann_file=
        'work_dirs/retinanet_coco_ppal_5rounds_2percent_to_10percent/round7/annotations/labeled.json',
        img_prefix='data/coco/train2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
        ]),
    val=dict(
        type='CocoDataset',
        ann_file='data/coco/annotations/instances_val2017.json',
        img_prefix='data/coco/val2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CocoDataset',
        ann_file='data/coco/annotations/instances_val2017.json',
        img_prefix='data/coco/val2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
labeled_data = 'work_dirs/retinanet_coco_ppal_5rounds_2percent_to_10percent/round7/annotations/labeled.json'
unlabeled_data = 'work_dirs/retinanet_coco_ppal_5rounds_2percent_to_10percent/round7/annotations/unlabeled.json'
evaluation = dict(interval=999999, metric='bbox')
work_dir = 'work_dirs/retinanet_coco_ppal_5rounds_2percent_to_10percent/round7'
auto_resume = False
gpu_ids = range(0, 1)

2024-01-20 02:51:28,754 - mmdet - INFO - Set random seed to 55426439, deterministic: False
2024-01-20 02:51:29,161 - mmdet - INFO - initialize ResNet with init_cfg {'type': 'Pretrained', 'checkpoint': 'data/pretrain_models/resnet50-19c8e357.pth'}
2024-01-20 02:51:32,894 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2024-01-20 02:51:32,953 - mmdet - INFO - initialize RetinaQualityEMAHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01, 'override': {'type': 'Normal', 'name': 'retina_cls', 'std': 0.01, 'bias_prob': 0.01}}
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from data/pretrain_models/resnet50-19c8e357.pth 

neck.lateral_convs.0.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RetinaNet  

neck.lateral_convs.1.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RetinaNet  

neck.lateral_convs.2.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RetinaNet  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RetinaNet  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RetinaNet  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RetinaNet  

neck.fpn_convs.3.conv.weight - torch.Size([256, 2048, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RetinaNet  

neck.fpn_convs.4.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.4.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RetinaNet  

bbox_head.cls_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

bbox_head.cls_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RetinaNet  

bbox_head.cls_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

bbox_head.cls_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RetinaNet  

bbox_head.cls_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

bbox_head.cls_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RetinaNet  

bbox_head.cls_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

bbox_head.cls_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RetinaNet  

bbox_head.reg_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

bbox_head.reg_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RetinaNet  

bbox_head.reg_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

bbox_head.reg_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RetinaNet  

bbox_head.reg_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

bbox_head.reg_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RetinaNet  

bbox_head.reg_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

bbox_head.reg_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RetinaNet  

bbox_head.retina_cls.weight - torch.Size([90, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=-4.59511985013459 

bbox_head.retina_cls.bias - torch.Size([90]): 
NormalInit: mean=0, std=0.01, bias=-4.59511985013459 

bbox_head.retina_reg.weight - torch.Size([36, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

bbox_head.retina_reg.bias - torch.Size([36]): 
NormalInit: mean=0, std=0.01, bias=0 
2024-01-20 02:51:39,662 - mmdet - INFO - Start running, host: root@42e23a26d0f9, work_dir: /content/drive/MyDrive/PPALVuongTan/PPAL/work_dirs/retinanet_coco_ppal_5rounds_2percent_to_10percent/round7
2024-01-20 02:51:39,663 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) NumClassCheckHook                  
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) NumClassCheckHook                  
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2024-01-20 02:51:39,664 - mmdet - INFO - workflow: [('train', 1)], max: 30 epochs
2024-01-20 02:51:39,664 - mmdet - INFO - Checkpoints will be saved to /content/drive/MyDrive/PPALVuongTan/PPAL/work_dirs/retinanet_coco_ppal_5rounds_2percent_to_10percent/round7 by HardDiskBackend.
2024-01-20 02:53:44,122 - mmdet - INFO - Iter [50/19530]	lr: 9.890e-04, eta: 13:28:04, time: 2.489, data_time: 0.592, memory: 8914, loss_cls: 1.1410, loss_bbox: 2.0630, loss: 3.2040, grad_norm: 5.4897
2024-01-20 02:55:29,552 - mmdet - INFO - Iter [100/19530]	lr: 1.988e-03, eta: 12:24:25, time: 2.109, data_time: 0.032, memory: 9244, loss_cls: 1.0029, loss_bbox: 1.2566, loss: 2.2595, grad_norm: 11.9730
2024-01-20 02:57:14,259 - mmdet - INFO - Iter [150/19530]	lr: 2.987e-03, eta: 12:00:28, time: 2.094, data_time: 0.021, memory: 9244, loss_cls: 0.7921, loss_bbox: 1.2221, loss: 2.0142, grad_norm: 10.7873
2024-01-20 02:58:59,033 - mmdet - INFO - Iter [200/19530]	lr: 3.986e-03, eta: 11:47:43, time: 2.095, data_time: 0.022, memory: 9244, loss_cls: 1.0096, loss_bbox: 1.2084, loss: 2.2180, grad_norm: 8.9111
2024-01-20 03:00:42,780 - mmdet - INFO - Iter [250/19530]	lr: 4.985e-03, eta: 11:38:04, time: 2.075, data_time: 0.022, memory: 10063, loss_cls: 1.0840, loss_bbox: 1.1288, loss: 2.2128, grad_norm: 5.1045
2024-01-20 03:02:27,175 - mmdet - INFO - Iter [300/19530]	lr: 5.984e-03, eta: 11:31:44, time: 2.088, data_time: 0.022, memory: 10063, loss_cls: 1.0389, loss_bbox: 1.1153, loss: 2.1543, grad_norm: 2.5364
2024-01-20 03:04:11,325 - mmdet - INFO - Iter [350/19530]	lr: 6.983e-03, eta: 11:26:30, time: 2.083, data_time: 0.022, memory: 10063, loss_cls: 0.9398, loss_bbox: 1.1402, loss: 2.0799, grad_norm: 3.4389
2024-01-20 03:05:54,607 - mmdet - INFO - Iter [400/19530]	lr: 7.982e-03, eta: 11:21:27, time: 2.066, data_time: 0.022, memory: 10063, loss_cls: 0.8681, loss_bbox: 1.1353, loss: 2.0033, grad_norm: 2.6007
2024-01-20 03:07:38,143 - mmdet - INFO - Iter [450/19530]	lr: 8.981e-03, eta: 11:17:18, time: 2.071, data_time: 0.021, memory: 10063, loss_cls: 0.8382, loss_bbox: 1.0713, loss: 1.9095, grad_norm: 2.1696
2024-01-20 03:09:21,012 - mmdet - INFO - Iter [500/19530]	lr: 9.980e-03, eta: 11:13:14, time: 2.057, data_time: 0.025, memory: 10063, loss_cls: 0.7366, loss_bbox: 1.0199, loss: 1.7565, grad_norm: 2.3784
2024-01-20 03:11:06,369 - mmdet - INFO - Iter [550/19530]	lr: 1.000e-02, eta: 11:11:01, time: 2.107, data_time: 0.056, memory: 10063, loss_cls: 0.8274, loss_bbox: 0.9602, loss: 1.7876, grad_norm: 2.4517
2024-01-20 03:12:50,562 - mmdet - INFO - Iter [600/19530]	lr: 1.000e-02, eta: 11:08:16, time: 2.084, data_time: 0.033, memory: 10063, loss_cls: 0.7044, loss_bbox: 0.9558, loss: 1.6602, grad_norm: 2.6287
